import os
from datetime import datetime
from typing import Literal

from fastapi import FastAPI, Form
from fastapi.responses import FileResponse
from pptx.enum.shapes import MSO_SHAPE_TYPE

from tools.validator import convert_to_filename

app = FastAPI()


@app.post("/create-ppt/")
async def create_file(
    content: str = Form(...), template: Literal["NILA"] = "NILA"
) -> FileResponse:
    # Change title and date on slide 1
    return
    title_slide = presentation.slides[0]
    presentation_title = json_outline.get("title", "Untitled")
    current_date = datetime.now().strftime("%B %d, %Y")

    for shape in title_slide.shapes:
        # Title
        if shape.shape_type == MSO_SHAPE_TYPE.PLACEHOLDER:
            if shape.placeholder_format.type == 2:
                shape.text = presentation_title
        # Date
        elif shape.shape_type == MSO_SHAPE_TYPE.TEXT_BOX:
            text_frame = shape.text_frame
            text_frame.clear()
            text_frame.text = f"{current_date} - generated by Copilot"

    # Add content slides
    for slide_dict in json_outline["slides"]:
        # Use the second layout for content
        slide_layout = presentation.slide_layouts[1]
        slide = presentation.slides.add_slide(slide_layout)

        for shape in slide.placeholders:
            if shape.placeholder_format.type == 1:  # header content
                shape.text = slide_dict.get("header")
            elif shape.placeholder_format.type == 2:
                shape.text = slide_dict.get("content")
                break

    # move the end slide to the back
    endslide = presentation.slides._sldIdLst[2]
    presentation.slides._sldIdLst.remove(endslide)
    presentation.slides._sldIdLst.insert(len(presentation.slides) + 1, endslide)
    # remove the empty slide
    presentation.slides._sldIdLst.remove(presentation.slides._sldIdLst[1])

    # Save the new presentation
    filename = convert_to_filename(presentation_title)
    output_path = f"{os.getenv("PPT_OUTPUT_FOLDER") or "output/"}{filename}.pptx"
    presentation.save(output_path)
    print(f"Presentation saved as {output_path}")
    # Return the file as a response
    return FileResponse(
        output_path,
        media_type="application/vnd.openxmlformats-officedocument.presentationml.presentation",
        filename=filename,
    )
