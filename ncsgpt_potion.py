from datetime import datetime
from typing import List

from pptx.slide import Slide, SlideLayout

from llms.openai import call_openai
from potion import ComposeSchema, DesignSchema, Potion
from tools.formatter import process_markdown_to_ppt

# creating NCSgpt Potion from slide template


async def create_title_slide(ds: DesignSchema, slide: Slide) -> None:
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()

            if "presentation title" in text:
                shape.text = await call_openai(f"Generate a title for a powerpoint base on the the \
                                               description: {ds.desc}")
            elif "datetime" in text:
                shape.text = (
                    f"{datetime.now().strftime('%B %d, %Y')} - generated by Copilot"
                )


async def create_text_slide(ds: DesignSchema, slide: Slide) -> None:
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()

            if "slide title" in text:
                shape.text = ds.slide_title
            elif "slide content" in text:
                prompt = f"You are now writing a short analysis of 100 words for one \
                    of the slides within a powerpoint about {ds.slide_title}, details \
                    on {ds.desc}.\nProvide empirical data and trends where possible.\
                    Do not include other comments, give me the short analysis only"
                shape.text = await call_openai(prompt)


async def create_point_form_slide(ds: DesignSchema, slide: Slide) -> None:
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()

            if "slide title" in text:
                shape.text = ds.slide_title
            elif "slide content" in text:
                prompt = f"You are now writing a point form breakdown (around 50 words) \
                    for one of the slides within a powerpoint about {ds.slide_title}, \
                    details on {ds.desc}.\nProvide data and details in point form.\
                    Do not include other comments, give me the short analysis only"
                res = await call_openai(prompt)
                process_markdown_to_ppt(shape, res)


async def create_flow_chart_slide(ds: DesignSchema, slide: SlideLayout) -> None:
    """Creating the end slide"""
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()
            if "slide title" in text:
                shape.text = ds.slide_title


async def create_end_slide(ds: DesignSchema, slide: SlideLayout) -> None:
    """Creating the end slide"""
    pass


compose_schemas: List[ComposeSchema] = [
    ComposeSchema(
        name="title_slide",
        desc="Use this slide when it's the start of a presentation. There can only be one per presentation.",
        func=create_title_slide,
        slide_layout_index=0,
    ),
    ComposeSchema(
        name="text_slide",
        desc="Use this slide when you want to present a text-concentrated with empirical data slide.",
        func=create_text_slide,
        slide_layout_index=1,
    ),
    ComposeSchema(
        name="point_form_slide",
        desc="Use this slide when you to present a slide with data in point form.",
        func=create_point_form_slide,
        slide_layout_index=2,
    ),
    ComposeSchema(
        name="user_flow_slide",
        desc="Use this slide when to present a journey flow / user journey / directional data.",
        func=create_flow_chart_slide,
        slide_layout_index=3,
    ),
    ComposeSchema(
        name="end_slide",
        desc="Use this slide when it's the end of a presentation. There can only be one per presentation",
        func=create_end_slide,
        slide_layout_index=4,
    ),
]

ncspotion = Potion(
    template_path="templates/nila_ppt_template.pptx", compose_schemas=compose_schemas
)
