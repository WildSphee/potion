from datetime import datetime
from io import BytesIO
from typing import List

from pptx.enum.shapes import MSO_SHAPE_TYPE
from pptx.slide import Slide, SlideLayout

from llms.openai import call_openai
from potion import ComposeSchema, DesignSchema, Potion
from tools.formatter import process_markdown_to_ppt
from tools.replicate import create_image

# creating NCSgpt Potion from slide template


async def create_title_slide(ds: DesignSchema, slide: Slide) -> None:
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()

            if "presentation title" in text:
                shape.text = await call_openai(f'Generate a title for a powerpoint base on the the \
                                               description: {ds.desc}, do not include " or quotes blocks.')
            elif "datetime" in text:
                shape.text = (
                    f"{datetime.now().strftime('%B %d, %Y')} - generated by Copilot"
                )


async def create_text_slide(ds: DesignSchema, slide: Slide) -> None:
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()

            if "slide title" in text:
                shape.text = ds.slide_title
            elif "slide content" in text:
                prompt = f"You are now writing a short analysis of 100 words for one \
                    of the slides within a powerpoint about {ds.slide_title}, details \
                    on {ds.desc}.\nProvide empirical data and trends where possible.\
                    Do not include other comments, give me the short analysis only"
                shape.text = await call_openai(prompt)


async def create_point_form_slide(ds: DesignSchema, slide: Slide) -> None:
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()

            if "slide title" in text:
                shape.text = ds.slide_title
            elif "point form content" in text:
                prompt = f"You are now writing a point form breakdown (each point around\
                    10 words, 5 points or lesser) \
                    for one of the slides within a powerpoint about {ds.slide_title}, \
                    details on {ds.desc}.\nProvide data and details in point form.\
                    Do not include other comments, give me the short analysis only"
                res = await call_openai(prompt)
                process_markdown_to_ppt(shape, res)


def create_image_slide_builder(aspect_ratio: str = "1:1") -> callable:
    async def create_image_slide(ds: DesignSchema, slide: Slide) -> None:
        image_data = None

        # create an image using replicate
        image_path = await create_image(ds.desc, aspect_ratio=aspect_ratio)

        # read image
        try:
            with open(image_path, "rb") as f:
                image_data = f.read()
        except FileNotFoundError:
            print(f"Local image file not found: {image_path}")
            return

        if image_data is None:
            print("Unable to load image data.")
            return

        # Replace the image placeholder with the actual image
        for shape in slide.shapes:
            # replace title and description
            if shape.has_text_frame:
                text = shape.text.strip().replace("\n", "").replace("\r", "").lower()
                if "slide title" in text:
                    shape.text = ds.slide_title
                elif "slide content" in text:
                    shape.text = ds.desc
                continue

            # replace image
            if shape.shape_type == MSO_SHAPE_TYPE.PICTURE:
                sp = shape.element
                sp.getparent().remove(sp)

                # Add the picture to the slide at the placeholder's position and size
                image_stream = BytesIO(image_data)
                slide.shapes.add_picture(
                    image_stream, shape.left, shape.top, shape.width, shape.height
                )
                print("Image has been inserted into the slide.")
    return create_image_slide


async def create_flow_chart_slide(ds: DesignSchema, slide: SlideLayout) -> None:
    """Creating the end slide"""
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue

        if shape.is_placeholder:
            text = shape.text.strip().replace("\n", "").replace("\r", "").lower()
            if "slide title" in text:
                shape.text = ds.slide_title


async def create_end_slide(ds: DesignSchema, slide: SlideLayout) -> None:
    """Creating the end slide"""
    pass


compose_schemas: List[ComposeSchema] = [
    ComposeSchema(
        name="title_slide",
        desc="Use this slide when it's the start of a presentation. There can only be one per presentation.",
        func=create_title_slide,
        slide_layout_index=0,
    ),
    ComposeSchema(
        name="text_slide",
        desc="Use this slide when you want to present a text-concentrated with empirical data slide.",
        func=create_text_slide,
        slide_layout_index=1,
    ),
    ComposeSchema(
        name="point_form_slide",
        desc="Use this slide when you want to present a slide with data in point form.",
        func=create_point_form_slide,
        slide_layout_index=2,
    ),
    ComposeSchema(
        name="image_right_slide",
        desc="Similar to text_slide, with an image on the right. Use it Sparingly to introduce variety.",
        func=create_image_slide_builder(aspect_ratio="2:3"),
        slide_layout_index=3,
    ),
    ComposeSchema(
        name="image_left_slide",
        desc="Similar to text_slide, with an image on the left. Use it Sparingly to introduce variety.",
        func=create_image_slide_builder(aspect_ratio="3:2"),
        slide_layout_index=4,
    ),
    ComposeSchema(
        name="user_flow_slide",
        desc="Use this slide when to present a trend / user journey / directional data.",
        func=create_flow_chart_slide,
        slide_layout_index=5,
    ),
    ComposeSchema(
        name="end_slide",
        desc="Use this slide when it's the end of a presentation. There can only be one per presentation",
        func=create_end_slide,
        slide_layout_index=6,
    ),
]

ncspotion = Potion(
    template_path="templates/nila_ppt_template.pptx", compose_schemas=compose_schemas
)
